
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `depoimentos` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model depoimentos
 * 
 */
export type depoimentosModel = runtime.Types.Result.DefaultSelection<Prisma.$depoimentosPayload>

export type AggregateDepoimentos = {
  _count: DepoimentosCountAggregateOutputType | null
  _avg: DepoimentosAvgAggregateOutputType | null
  _sum: DepoimentosSumAggregateOutputType | null
  _min: DepoimentosMinAggregateOutputType | null
  _max: DepoimentosMaxAggregateOutputType | null
}

export type DepoimentosAvgAggregateOutputType = {
  id: number | null
  funcionario_id: number | null
}

export type DepoimentosSumAggregateOutputType = {
  id: number | null
  funcionario_id: number | null
}

export type DepoimentosMinAggregateOutputType = {
  id: number | null
  funcionario_id: number | null
  relato: string | null
  data: Date | null
  hora: Date | null
}

export type DepoimentosMaxAggregateOutputType = {
  id: number | null
  funcionario_id: number | null
  relato: string | null
  data: Date | null
  hora: Date | null
}

export type DepoimentosCountAggregateOutputType = {
  id: number
  funcionario_id: number
  relato: number
  data: number
  hora: number
  _all: number
}


export type DepoimentosAvgAggregateInputType = {
  id?: true
  funcionario_id?: true
}

export type DepoimentosSumAggregateInputType = {
  id?: true
  funcionario_id?: true
}

export type DepoimentosMinAggregateInputType = {
  id?: true
  funcionario_id?: true
  relato?: true
  data?: true
  hora?: true
}

export type DepoimentosMaxAggregateInputType = {
  id?: true
  funcionario_id?: true
  relato?: true
  data?: true
  hora?: true
}

export type DepoimentosCountAggregateInputType = {
  id?: true
  funcionario_id?: true
  relato?: true
  data?: true
  hora?: true
  _all?: true
}

export type DepoimentosAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which depoimentos to aggregate.
   */
  where?: Prisma.depoimentosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of depoimentos to fetch.
   */
  orderBy?: Prisma.depoimentosOrderByWithRelationInput | Prisma.depoimentosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.depoimentosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` depoimentos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` depoimentos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned depoimentos
  **/
  _count?: true | DepoimentosCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DepoimentosAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DepoimentosSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DepoimentosMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DepoimentosMaxAggregateInputType
}

export type GetDepoimentosAggregateType<T extends DepoimentosAggregateArgs> = {
      [P in keyof T & keyof AggregateDepoimentos]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDepoimentos[P]>
    : Prisma.GetScalarType<T[P], AggregateDepoimentos[P]>
}




export type depoimentosGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.depoimentosWhereInput
  orderBy?: Prisma.depoimentosOrderByWithAggregationInput | Prisma.depoimentosOrderByWithAggregationInput[]
  by: Prisma.DepoimentosScalarFieldEnum[] | Prisma.DepoimentosScalarFieldEnum
  having?: Prisma.depoimentosScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DepoimentosCountAggregateInputType | true
  _avg?: DepoimentosAvgAggregateInputType
  _sum?: DepoimentosSumAggregateInputType
  _min?: DepoimentosMinAggregateInputType
  _max?: DepoimentosMaxAggregateInputType
}

export type DepoimentosGroupByOutputType = {
  id: number
  funcionario_id: number | null
  relato: string | null
  data: Date | null
  hora: Date | null
  _count: DepoimentosCountAggregateOutputType | null
  _avg: DepoimentosAvgAggregateOutputType | null
  _sum: DepoimentosSumAggregateOutputType | null
  _min: DepoimentosMinAggregateOutputType | null
  _max: DepoimentosMaxAggregateOutputType | null
}

type GetDepoimentosGroupByPayload<T extends depoimentosGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DepoimentosGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DepoimentosGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DepoimentosGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DepoimentosGroupByOutputType[P]>
      }
    >
  >



export type depoimentosWhereInput = {
  AND?: Prisma.depoimentosWhereInput | Prisma.depoimentosWhereInput[]
  OR?: Prisma.depoimentosWhereInput[]
  NOT?: Prisma.depoimentosWhereInput | Prisma.depoimentosWhereInput[]
  id?: Prisma.IntFilter<"depoimentos"> | number
  funcionario_id?: Prisma.IntNullableFilter<"depoimentos"> | number | null
  relato?: Prisma.StringNullableFilter<"depoimentos"> | string | null
  data?: Prisma.DateTimeNullableFilter<"depoimentos"> | Date | string | null
  hora?: Prisma.DateTimeNullableFilter<"depoimentos"> | Date | string | null
}

export type depoimentosOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  funcionario_id?: Prisma.SortOrderInput | Prisma.SortOrder
  relato?: Prisma.SortOrderInput | Prisma.SortOrder
  data?: Prisma.SortOrderInput | Prisma.SortOrder
  hora?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.depoimentosOrderByRelevanceInput
}

export type depoimentosWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.depoimentosWhereInput | Prisma.depoimentosWhereInput[]
  OR?: Prisma.depoimentosWhereInput[]
  NOT?: Prisma.depoimentosWhereInput | Prisma.depoimentosWhereInput[]
  funcionario_id?: Prisma.IntNullableFilter<"depoimentos"> | number | null
  relato?: Prisma.StringNullableFilter<"depoimentos"> | string | null
  data?: Prisma.DateTimeNullableFilter<"depoimentos"> | Date | string | null
  hora?: Prisma.DateTimeNullableFilter<"depoimentos"> | Date | string | null
}, "id">

export type depoimentosOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  funcionario_id?: Prisma.SortOrderInput | Prisma.SortOrder
  relato?: Prisma.SortOrderInput | Prisma.SortOrder
  data?: Prisma.SortOrderInput | Prisma.SortOrder
  hora?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.depoimentosCountOrderByAggregateInput
  _avg?: Prisma.depoimentosAvgOrderByAggregateInput
  _max?: Prisma.depoimentosMaxOrderByAggregateInput
  _min?: Prisma.depoimentosMinOrderByAggregateInput
  _sum?: Prisma.depoimentosSumOrderByAggregateInput
}

export type depoimentosScalarWhereWithAggregatesInput = {
  AND?: Prisma.depoimentosScalarWhereWithAggregatesInput | Prisma.depoimentosScalarWhereWithAggregatesInput[]
  OR?: Prisma.depoimentosScalarWhereWithAggregatesInput[]
  NOT?: Prisma.depoimentosScalarWhereWithAggregatesInput | Prisma.depoimentosScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"depoimentos"> | number
  funcionario_id?: Prisma.IntNullableWithAggregatesFilter<"depoimentos"> | number | null
  relato?: Prisma.StringNullableWithAggregatesFilter<"depoimentos"> | string | null
  data?: Prisma.DateTimeNullableWithAggregatesFilter<"depoimentos"> | Date | string | null
  hora?: Prisma.DateTimeNullableWithAggregatesFilter<"depoimentos"> | Date | string | null
}

export type depoimentosCreateInput = {
  id: number
  funcionario_id?: number | null
  relato?: string | null
  data?: Date | string | null
  hora?: Date | string | null
}

export type depoimentosUncheckedCreateInput = {
  id: number
  funcionario_id?: number | null
  relato?: string | null
  data?: Date | string | null
  hora?: Date | string | null
}

export type depoimentosUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  funcionario_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  relato?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  hora?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type depoimentosUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  funcionario_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  relato?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  hora?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type depoimentosCreateManyInput = {
  id: number
  funcionario_id?: number | null
  relato?: string | null
  data?: Date | string | null
  hora?: Date | string | null
}

export type depoimentosUpdateManyMutationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  funcionario_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  relato?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  hora?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type depoimentosUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  funcionario_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  relato?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  data?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  hora?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
}

export type depoimentosOrderByRelevanceInput = {
  fields: Prisma.depoimentosOrderByRelevanceFieldEnum | Prisma.depoimentosOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type depoimentosCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  funcionario_id?: Prisma.SortOrder
  relato?: Prisma.SortOrder
  data?: Prisma.SortOrder
  hora?: Prisma.SortOrder
}

export type depoimentosAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  funcionario_id?: Prisma.SortOrder
}

export type depoimentosMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  funcionario_id?: Prisma.SortOrder
  relato?: Prisma.SortOrder
  data?: Prisma.SortOrder
  hora?: Prisma.SortOrder
}

export type depoimentosMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  funcionario_id?: Prisma.SortOrder
  relato?: Prisma.SortOrder
  data?: Prisma.SortOrder
  hora?: Prisma.SortOrder
}

export type depoimentosSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  funcionario_id?: Prisma.SortOrder
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}



export type depoimentosSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  funcionario_id?: boolean
  relato?: boolean
  data?: boolean
  hora?: boolean
}, ExtArgs["result"]["depoimentos"]>



export type depoimentosSelectScalar = {
  id?: boolean
  funcionario_id?: boolean
  relato?: boolean
  data?: boolean
  hora?: boolean
}

export type depoimentosOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "funcionario_id" | "relato" | "data" | "hora", ExtArgs["result"]["depoimentos"]>

export type $depoimentosPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "depoimentos"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    funcionario_id: number | null
    relato: string | null
    data: Date | null
    hora: Date | null
  }, ExtArgs["result"]["depoimentos"]>
  composites: {}
}

export type depoimentosGetPayload<S extends boolean | null | undefined | depoimentosDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$depoimentosPayload, S>

export type depoimentosCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<depoimentosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DepoimentosCountAggregateInputType | true
  }

export interface depoimentosDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['depoimentos'], meta: { name: 'depoimentos' } }
  /**
   * Find zero or one Depoimentos that matches the filter.
   * @param {depoimentosFindUniqueArgs} args - Arguments to find a Depoimentos
   * @example
   * // Get one Depoimentos
   * const depoimentos = await prisma.depoimentos.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends depoimentosFindUniqueArgs>(args: Prisma.SelectSubset<T, depoimentosFindUniqueArgs<ExtArgs>>): Prisma.Prisma__depoimentosClient<runtime.Types.Result.GetResult<Prisma.$depoimentosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Depoimentos that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {depoimentosFindUniqueOrThrowArgs} args - Arguments to find a Depoimentos
   * @example
   * // Get one Depoimentos
   * const depoimentos = await prisma.depoimentos.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends depoimentosFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, depoimentosFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__depoimentosClient<runtime.Types.Result.GetResult<Prisma.$depoimentosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Depoimentos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {depoimentosFindFirstArgs} args - Arguments to find a Depoimentos
   * @example
   * // Get one Depoimentos
   * const depoimentos = await prisma.depoimentos.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends depoimentosFindFirstArgs>(args?: Prisma.SelectSubset<T, depoimentosFindFirstArgs<ExtArgs>>): Prisma.Prisma__depoimentosClient<runtime.Types.Result.GetResult<Prisma.$depoimentosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Depoimentos that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {depoimentosFindFirstOrThrowArgs} args - Arguments to find a Depoimentos
   * @example
   * // Get one Depoimentos
   * const depoimentos = await prisma.depoimentos.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends depoimentosFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, depoimentosFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__depoimentosClient<runtime.Types.Result.GetResult<Prisma.$depoimentosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Depoimentos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {depoimentosFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Depoimentos
   * const depoimentos = await prisma.depoimentos.findMany()
   * 
   * // Get first 10 Depoimentos
   * const depoimentos = await prisma.depoimentos.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const depoimentosWithIdOnly = await prisma.depoimentos.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends depoimentosFindManyArgs>(args?: Prisma.SelectSubset<T, depoimentosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$depoimentosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Depoimentos.
   * @param {depoimentosCreateArgs} args - Arguments to create a Depoimentos.
   * @example
   * // Create one Depoimentos
   * const Depoimentos = await prisma.depoimentos.create({
   *   data: {
   *     // ... data to create a Depoimentos
   *   }
   * })
   * 
   */
  create<T extends depoimentosCreateArgs>(args: Prisma.SelectSubset<T, depoimentosCreateArgs<ExtArgs>>): Prisma.Prisma__depoimentosClient<runtime.Types.Result.GetResult<Prisma.$depoimentosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Depoimentos.
   * @param {depoimentosCreateManyArgs} args - Arguments to create many Depoimentos.
   * @example
   * // Create many Depoimentos
   * const depoimentos = await prisma.depoimentos.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends depoimentosCreateManyArgs>(args?: Prisma.SelectSubset<T, depoimentosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Depoimentos.
   * @param {depoimentosDeleteArgs} args - Arguments to delete one Depoimentos.
   * @example
   * // Delete one Depoimentos
   * const Depoimentos = await prisma.depoimentos.delete({
   *   where: {
   *     // ... filter to delete one Depoimentos
   *   }
   * })
   * 
   */
  delete<T extends depoimentosDeleteArgs>(args: Prisma.SelectSubset<T, depoimentosDeleteArgs<ExtArgs>>): Prisma.Prisma__depoimentosClient<runtime.Types.Result.GetResult<Prisma.$depoimentosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Depoimentos.
   * @param {depoimentosUpdateArgs} args - Arguments to update one Depoimentos.
   * @example
   * // Update one Depoimentos
   * const depoimentos = await prisma.depoimentos.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends depoimentosUpdateArgs>(args: Prisma.SelectSubset<T, depoimentosUpdateArgs<ExtArgs>>): Prisma.Prisma__depoimentosClient<runtime.Types.Result.GetResult<Prisma.$depoimentosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Depoimentos.
   * @param {depoimentosDeleteManyArgs} args - Arguments to filter Depoimentos to delete.
   * @example
   * // Delete a few Depoimentos
   * const { count } = await prisma.depoimentos.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends depoimentosDeleteManyArgs>(args?: Prisma.SelectSubset<T, depoimentosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Depoimentos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {depoimentosUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Depoimentos
   * const depoimentos = await prisma.depoimentos.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends depoimentosUpdateManyArgs>(args: Prisma.SelectSubset<T, depoimentosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Depoimentos.
   * @param {depoimentosUpsertArgs} args - Arguments to update or create a Depoimentos.
   * @example
   * // Update or create a Depoimentos
   * const depoimentos = await prisma.depoimentos.upsert({
   *   create: {
   *     // ... data to create a Depoimentos
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Depoimentos we want to update
   *   }
   * })
   */
  upsert<T extends depoimentosUpsertArgs>(args: Prisma.SelectSubset<T, depoimentosUpsertArgs<ExtArgs>>): Prisma.Prisma__depoimentosClient<runtime.Types.Result.GetResult<Prisma.$depoimentosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Depoimentos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {depoimentosCountArgs} args - Arguments to filter Depoimentos to count.
   * @example
   * // Count the number of Depoimentos
   * const count = await prisma.depoimentos.count({
   *   where: {
   *     // ... the filter for the Depoimentos we want to count
   *   }
   * })
  **/
  count<T extends depoimentosCountArgs>(
    args?: Prisma.Subset<T, depoimentosCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DepoimentosCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Depoimentos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DepoimentosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DepoimentosAggregateArgs>(args: Prisma.Subset<T, DepoimentosAggregateArgs>): Prisma.PrismaPromise<GetDepoimentosAggregateType<T>>

  /**
   * Group by Depoimentos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {depoimentosGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends depoimentosGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: depoimentosGroupByArgs['orderBy'] }
      : { orderBy?: depoimentosGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, depoimentosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepoimentosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the depoimentos model
 */
readonly fields: depoimentosFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for depoimentos.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__depoimentosClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the depoimentos model
 */
export interface depoimentosFieldRefs {
  readonly id: Prisma.FieldRef<"depoimentos", 'Int'>
  readonly funcionario_id: Prisma.FieldRef<"depoimentos", 'Int'>
  readonly relato: Prisma.FieldRef<"depoimentos", 'String'>
  readonly data: Prisma.FieldRef<"depoimentos", 'DateTime'>
  readonly hora: Prisma.FieldRef<"depoimentos", 'DateTime'>
}
    

// Custom InputTypes
/**
 * depoimentos findUnique
 */
export type depoimentosFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the depoimentos
   */
  select?: Prisma.depoimentosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the depoimentos
   */
  omit?: Prisma.depoimentosOmit<ExtArgs> | null
  /**
   * Filter, which depoimentos to fetch.
   */
  where: Prisma.depoimentosWhereUniqueInput
}

/**
 * depoimentos findUniqueOrThrow
 */
export type depoimentosFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the depoimentos
   */
  select?: Prisma.depoimentosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the depoimentos
   */
  omit?: Prisma.depoimentosOmit<ExtArgs> | null
  /**
   * Filter, which depoimentos to fetch.
   */
  where: Prisma.depoimentosWhereUniqueInput
}

/**
 * depoimentos findFirst
 */
export type depoimentosFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the depoimentos
   */
  select?: Prisma.depoimentosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the depoimentos
   */
  omit?: Prisma.depoimentosOmit<ExtArgs> | null
  /**
   * Filter, which depoimentos to fetch.
   */
  where?: Prisma.depoimentosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of depoimentos to fetch.
   */
  orderBy?: Prisma.depoimentosOrderByWithRelationInput | Prisma.depoimentosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for depoimentos.
   */
  cursor?: Prisma.depoimentosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` depoimentos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` depoimentos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of depoimentos.
   */
  distinct?: Prisma.DepoimentosScalarFieldEnum | Prisma.DepoimentosScalarFieldEnum[]
}

/**
 * depoimentos findFirstOrThrow
 */
export type depoimentosFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the depoimentos
   */
  select?: Prisma.depoimentosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the depoimentos
   */
  omit?: Prisma.depoimentosOmit<ExtArgs> | null
  /**
   * Filter, which depoimentos to fetch.
   */
  where?: Prisma.depoimentosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of depoimentos to fetch.
   */
  orderBy?: Prisma.depoimentosOrderByWithRelationInput | Prisma.depoimentosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for depoimentos.
   */
  cursor?: Prisma.depoimentosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` depoimentos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` depoimentos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of depoimentos.
   */
  distinct?: Prisma.DepoimentosScalarFieldEnum | Prisma.DepoimentosScalarFieldEnum[]
}

/**
 * depoimentos findMany
 */
export type depoimentosFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the depoimentos
   */
  select?: Prisma.depoimentosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the depoimentos
   */
  omit?: Prisma.depoimentosOmit<ExtArgs> | null
  /**
   * Filter, which depoimentos to fetch.
   */
  where?: Prisma.depoimentosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of depoimentos to fetch.
   */
  orderBy?: Prisma.depoimentosOrderByWithRelationInput | Prisma.depoimentosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing depoimentos.
   */
  cursor?: Prisma.depoimentosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` depoimentos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` depoimentos.
   */
  skip?: number
  distinct?: Prisma.DepoimentosScalarFieldEnum | Prisma.DepoimentosScalarFieldEnum[]
}

/**
 * depoimentos create
 */
export type depoimentosCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the depoimentos
   */
  select?: Prisma.depoimentosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the depoimentos
   */
  omit?: Prisma.depoimentosOmit<ExtArgs> | null
  /**
   * The data needed to create a depoimentos.
   */
  data: Prisma.XOR<Prisma.depoimentosCreateInput, Prisma.depoimentosUncheckedCreateInput>
}

/**
 * depoimentos createMany
 */
export type depoimentosCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many depoimentos.
   */
  data: Prisma.depoimentosCreateManyInput | Prisma.depoimentosCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * depoimentos update
 */
export type depoimentosUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the depoimentos
   */
  select?: Prisma.depoimentosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the depoimentos
   */
  omit?: Prisma.depoimentosOmit<ExtArgs> | null
  /**
   * The data needed to update a depoimentos.
   */
  data: Prisma.XOR<Prisma.depoimentosUpdateInput, Prisma.depoimentosUncheckedUpdateInput>
  /**
   * Choose, which depoimentos to update.
   */
  where: Prisma.depoimentosWhereUniqueInput
}

/**
 * depoimentos updateMany
 */
export type depoimentosUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update depoimentos.
   */
  data: Prisma.XOR<Prisma.depoimentosUpdateManyMutationInput, Prisma.depoimentosUncheckedUpdateManyInput>
  /**
   * Filter which depoimentos to update
   */
  where?: Prisma.depoimentosWhereInput
  /**
   * Limit how many depoimentos to update.
   */
  limit?: number
}

/**
 * depoimentos upsert
 */
export type depoimentosUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the depoimentos
   */
  select?: Prisma.depoimentosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the depoimentos
   */
  omit?: Prisma.depoimentosOmit<ExtArgs> | null
  /**
   * The filter to search for the depoimentos to update in case it exists.
   */
  where: Prisma.depoimentosWhereUniqueInput
  /**
   * In case the depoimentos found by the `where` argument doesn't exist, create a new depoimentos with this data.
   */
  create: Prisma.XOR<Prisma.depoimentosCreateInput, Prisma.depoimentosUncheckedCreateInput>
  /**
   * In case the depoimentos was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.depoimentosUpdateInput, Prisma.depoimentosUncheckedUpdateInput>
}

/**
 * depoimentos delete
 */
export type depoimentosDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the depoimentos
   */
  select?: Prisma.depoimentosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the depoimentos
   */
  omit?: Prisma.depoimentosOmit<ExtArgs> | null
  /**
   * Filter which depoimentos to delete.
   */
  where: Prisma.depoimentosWhereUniqueInput
}

/**
 * depoimentos deleteMany
 */
export type depoimentosDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which depoimentos to delete
   */
  where?: Prisma.depoimentosWhereInput
  /**
   * Limit how many depoimentos to delete.
   */
  limit?: number
}

/**
 * depoimentos without action
 */
export type depoimentosDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the depoimentos
   */
  select?: Prisma.depoimentosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the depoimentos
   */
  omit?: Prisma.depoimentosOmit<ExtArgs> | null
}
