
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `obras` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model obras
 * 
 */
export type obrasModel = runtime.Types.Result.DefaultSelection<Prisma.$obrasPayload>

export type AggregateObras = {
  _count: ObrasCountAggregateOutputType | null
  _avg: ObrasAvgAggregateOutputType | null
  _sum: ObrasSumAggregateOutputType | null
  _min: ObrasMinAggregateOutputType | null
  _max: ObrasMaxAggregateOutputType | null
}

export type ObrasAvgAggregateOutputType = {
  id: number | null
  sala_id: number | null
}

export type ObrasSumAggregateOutputType = {
  id: number | null
  sala_id: number | null
}

export type ObrasMinAggregateOutputType = {
  id: number | null
  nome: string | null
  tipo: string | null
  sala_id: number | null
}

export type ObrasMaxAggregateOutputType = {
  id: number | null
  nome: string | null
  tipo: string | null
  sala_id: number | null
}

export type ObrasCountAggregateOutputType = {
  id: number
  nome: number
  tipo: number
  sala_id: number
  _all: number
}


export type ObrasAvgAggregateInputType = {
  id?: true
  sala_id?: true
}

export type ObrasSumAggregateInputType = {
  id?: true
  sala_id?: true
}

export type ObrasMinAggregateInputType = {
  id?: true
  nome?: true
  tipo?: true
  sala_id?: true
}

export type ObrasMaxAggregateInputType = {
  id?: true
  nome?: true
  tipo?: true
  sala_id?: true
}

export type ObrasCountAggregateInputType = {
  id?: true
  nome?: true
  tipo?: true
  sala_id?: true
  _all?: true
}

export type ObrasAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which obras to aggregate.
   */
  where?: Prisma.obrasWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of obras to fetch.
   */
  orderBy?: Prisma.obrasOrderByWithRelationInput | Prisma.obrasOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.obrasWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` obras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` obras.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned obras
  **/
  _count?: true | ObrasCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ObrasAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ObrasSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ObrasMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ObrasMaxAggregateInputType
}

export type GetObrasAggregateType<T extends ObrasAggregateArgs> = {
      [P in keyof T & keyof AggregateObras]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateObras[P]>
    : Prisma.GetScalarType<T[P], AggregateObras[P]>
}




export type obrasGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.obrasWhereInput
  orderBy?: Prisma.obrasOrderByWithAggregationInput | Prisma.obrasOrderByWithAggregationInput[]
  by: Prisma.ObrasScalarFieldEnum[] | Prisma.ObrasScalarFieldEnum
  having?: Prisma.obrasScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ObrasCountAggregateInputType | true
  _avg?: ObrasAvgAggregateInputType
  _sum?: ObrasSumAggregateInputType
  _min?: ObrasMinAggregateInputType
  _max?: ObrasMaxAggregateInputType
}

export type ObrasGroupByOutputType = {
  id: number
  nome: string | null
  tipo: string | null
  sala_id: number | null
  _count: ObrasCountAggregateOutputType | null
  _avg: ObrasAvgAggregateOutputType | null
  _sum: ObrasSumAggregateOutputType | null
  _min: ObrasMinAggregateOutputType | null
  _max: ObrasMaxAggregateOutputType | null
}

type GetObrasGroupByPayload<T extends obrasGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ObrasGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ObrasGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ObrasGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ObrasGroupByOutputType[P]>
      }
    >
  >



export type obrasWhereInput = {
  AND?: Prisma.obrasWhereInput | Prisma.obrasWhereInput[]
  OR?: Prisma.obrasWhereInput[]
  NOT?: Prisma.obrasWhereInput | Prisma.obrasWhereInput[]
  id?: Prisma.IntFilter<"obras"> | number
  nome?: Prisma.StringNullableFilter<"obras"> | string | null
  tipo?: Prisma.StringNullableFilter<"obras"> | string | null
  sala_id?: Prisma.IntNullableFilter<"obras"> | number | null
}

export type obrasOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrderInput | Prisma.SortOrder
  tipo?: Prisma.SortOrderInput | Prisma.SortOrder
  sala_id?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.obrasOrderByRelevanceInput
}

export type obrasWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.obrasWhereInput | Prisma.obrasWhereInput[]
  OR?: Prisma.obrasWhereInput[]
  NOT?: Prisma.obrasWhereInput | Prisma.obrasWhereInput[]
  nome?: Prisma.StringNullableFilter<"obras"> | string | null
  tipo?: Prisma.StringNullableFilter<"obras"> | string | null
  sala_id?: Prisma.IntNullableFilter<"obras"> | number | null
}, "id">

export type obrasOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrderInput | Prisma.SortOrder
  tipo?: Prisma.SortOrderInput | Prisma.SortOrder
  sala_id?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.obrasCountOrderByAggregateInput
  _avg?: Prisma.obrasAvgOrderByAggregateInput
  _max?: Prisma.obrasMaxOrderByAggregateInput
  _min?: Prisma.obrasMinOrderByAggregateInput
  _sum?: Prisma.obrasSumOrderByAggregateInput
}

export type obrasScalarWhereWithAggregatesInput = {
  AND?: Prisma.obrasScalarWhereWithAggregatesInput | Prisma.obrasScalarWhereWithAggregatesInput[]
  OR?: Prisma.obrasScalarWhereWithAggregatesInput[]
  NOT?: Prisma.obrasScalarWhereWithAggregatesInput | Prisma.obrasScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"obras"> | number
  nome?: Prisma.StringNullableWithAggregatesFilter<"obras"> | string | null
  tipo?: Prisma.StringNullableWithAggregatesFilter<"obras"> | string | null
  sala_id?: Prisma.IntNullableWithAggregatesFilter<"obras"> | number | null
}

export type obrasCreateInput = {
  id: number
  nome?: string | null
  tipo?: string | null
  sala_id?: number | null
}

export type obrasUncheckedCreateInput = {
  id: number
  nome?: string | null
  tipo?: string | null
  sala_id?: number | null
}

export type obrasUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sala_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type obrasUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sala_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type obrasCreateManyInput = {
  id: number
  nome?: string | null
  tipo?: string | null
  sala_id?: number | null
}

export type obrasUpdateManyMutationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sala_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type obrasUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  sala_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type obrasOrderByRelevanceInput = {
  fields: Prisma.obrasOrderByRelevanceFieldEnum | Prisma.obrasOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type obrasCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  tipo?: Prisma.SortOrder
  sala_id?: Prisma.SortOrder
}

export type obrasAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sala_id?: Prisma.SortOrder
}

export type obrasMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  tipo?: Prisma.SortOrder
  sala_id?: Prisma.SortOrder
}

export type obrasMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  tipo?: Prisma.SortOrder
  sala_id?: Prisma.SortOrder
}

export type obrasSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  sala_id?: Prisma.SortOrder
}



export type obrasSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nome?: boolean
  tipo?: boolean
  sala_id?: boolean
}, ExtArgs["result"]["obras"]>



export type obrasSelectScalar = {
  id?: boolean
  nome?: boolean
  tipo?: boolean
  sala_id?: boolean
}

export type obrasOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nome" | "tipo" | "sala_id", ExtArgs["result"]["obras"]>

export type $obrasPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "obras"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    nome: string | null
    tipo: string | null
    sala_id: number | null
  }, ExtArgs["result"]["obras"]>
  composites: {}
}

export type obrasGetPayload<S extends boolean | null | undefined | obrasDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$obrasPayload, S>

export type obrasCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<obrasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ObrasCountAggregateInputType | true
  }

export interface obrasDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['obras'], meta: { name: 'obras' } }
  /**
   * Find zero or one Obras that matches the filter.
   * @param {obrasFindUniqueArgs} args - Arguments to find a Obras
   * @example
   * // Get one Obras
   * const obras = await prisma.obras.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends obrasFindUniqueArgs>(args: Prisma.SelectSubset<T, obrasFindUniqueArgs<ExtArgs>>): Prisma.Prisma__obrasClient<runtime.Types.Result.GetResult<Prisma.$obrasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Obras that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {obrasFindUniqueOrThrowArgs} args - Arguments to find a Obras
   * @example
   * // Get one Obras
   * const obras = await prisma.obras.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends obrasFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, obrasFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__obrasClient<runtime.Types.Result.GetResult<Prisma.$obrasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Obras that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {obrasFindFirstArgs} args - Arguments to find a Obras
   * @example
   * // Get one Obras
   * const obras = await prisma.obras.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends obrasFindFirstArgs>(args?: Prisma.SelectSubset<T, obrasFindFirstArgs<ExtArgs>>): Prisma.Prisma__obrasClient<runtime.Types.Result.GetResult<Prisma.$obrasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Obras that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {obrasFindFirstOrThrowArgs} args - Arguments to find a Obras
   * @example
   * // Get one Obras
   * const obras = await prisma.obras.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends obrasFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, obrasFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__obrasClient<runtime.Types.Result.GetResult<Prisma.$obrasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Obras that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {obrasFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Obras
   * const obras = await prisma.obras.findMany()
   * 
   * // Get first 10 Obras
   * const obras = await prisma.obras.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const obrasWithIdOnly = await prisma.obras.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends obrasFindManyArgs>(args?: Prisma.SelectSubset<T, obrasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$obrasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Obras.
   * @param {obrasCreateArgs} args - Arguments to create a Obras.
   * @example
   * // Create one Obras
   * const Obras = await prisma.obras.create({
   *   data: {
   *     // ... data to create a Obras
   *   }
   * })
   * 
   */
  create<T extends obrasCreateArgs>(args: Prisma.SelectSubset<T, obrasCreateArgs<ExtArgs>>): Prisma.Prisma__obrasClient<runtime.Types.Result.GetResult<Prisma.$obrasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Obras.
   * @param {obrasCreateManyArgs} args - Arguments to create many Obras.
   * @example
   * // Create many Obras
   * const obras = await prisma.obras.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends obrasCreateManyArgs>(args?: Prisma.SelectSubset<T, obrasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Obras.
   * @param {obrasDeleteArgs} args - Arguments to delete one Obras.
   * @example
   * // Delete one Obras
   * const Obras = await prisma.obras.delete({
   *   where: {
   *     // ... filter to delete one Obras
   *   }
   * })
   * 
   */
  delete<T extends obrasDeleteArgs>(args: Prisma.SelectSubset<T, obrasDeleteArgs<ExtArgs>>): Prisma.Prisma__obrasClient<runtime.Types.Result.GetResult<Prisma.$obrasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Obras.
   * @param {obrasUpdateArgs} args - Arguments to update one Obras.
   * @example
   * // Update one Obras
   * const obras = await prisma.obras.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends obrasUpdateArgs>(args: Prisma.SelectSubset<T, obrasUpdateArgs<ExtArgs>>): Prisma.Prisma__obrasClient<runtime.Types.Result.GetResult<Prisma.$obrasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Obras.
   * @param {obrasDeleteManyArgs} args - Arguments to filter Obras to delete.
   * @example
   * // Delete a few Obras
   * const { count } = await prisma.obras.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends obrasDeleteManyArgs>(args?: Prisma.SelectSubset<T, obrasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Obras.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {obrasUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Obras
   * const obras = await prisma.obras.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends obrasUpdateManyArgs>(args: Prisma.SelectSubset<T, obrasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Obras.
   * @param {obrasUpsertArgs} args - Arguments to update or create a Obras.
   * @example
   * // Update or create a Obras
   * const obras = await prisma.obras.upsert({
   *   create: {
   *     // ... data to create a Obras
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Obras we want to update
   *   }
   * })
   */
  upsert<T extends obrasUpsertArgs>(args: Prisma.SelectSubset<T, obrasUpsertArgs<ExtArgs>>): Prisma.Prisma__obrasClient<runtime.Types.Result.GetResult<Prisma.$obrasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Obras.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {obrasCountArgs} args - Arguments to filter Obras to count.
   * @example
   * // Count the number of Obras
   * const count = await prisma.obras.count({
   *   where: {
   *     // ... the filter for the Obras we want to count
   *   }
   * })
  **/
  count<T extends obrasCountArgs>(
    args?: Prisma.Subset<T, obrasCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ObrasCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Obras.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ObrasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ObrasAggregateArgs>(args: Prisma.Subset<T, ObrasAggregateArgs>): Prisma.PrismaPromise<GetObrasAggregateType<T>>

  /**
   * Group by Obras.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {obrasGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends obrasGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: obrasGroupByArgs['orderBy'] }
      : { orderBy?: obrasGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, obrasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetObrasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the obras model
 */
readonly fields: obrasFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for obras.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__obrasClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the obras model
 */
export interface obrasFieldRefs {
  readonly id: Prisma.FieldRef<"obras", 'Int'>
  readonly nome: Prisma.FieldRef<"obras", 'String'>
  readonly tipo: Prisma.FieldRef<"obras", 'String'>
  readonly sala_id: Prisma.FieldRef<"obras", 'Int'>
}
    

// Custom InputTypes
/**
 * obras findUnique
 */
export type obrasFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the obras
   */
  select?: Prisma.obrasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the obras
   */
  omit?: Prisma.obrasOmit<ExtArgs> | null
  /**
   * Filter, which obras to fetch.
   */
  where: Prisma.obrasWhereUniqueInput
}

/**
 * obras findUniqueOrThrow
 */
export type obrasFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the obras
   */
  select?: Prisma.obrasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the obras
   */
  omit?: Prisma.obrasOmit<ExtArgs> | null
  /**
   * Filter, which obras to fetch.
   */
  where: Prisma.obrasWhereUniqueInput
}

/**
 * obras findFirst
 */
export type obrasFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the obras
   */
  select?: Prisma.obrasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the obras
   */
  omit?: Prisma.obrasOmit<ExtArgs> | null
  /**
   * Filter, which obras to fetch.
   */
  where?: Prisma.obrasWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of obras to fetch.
   */
  orderBy?: Prisma.obrasOrderByWithRelationInput | Prisma.obrasOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for obras.
   */
  cursor?: Prisma.obrasWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` obras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` obras.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of obras.
   */
  distinct?: Prisma.ObrasScalarFieldEnum | Prisma.ObrasScalarFieldEnum[]
}

/**
 * obras findFirstOrThrow
 */
export type obrasFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the obras
   */
  select?: Prisma.obrasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the obras
   */
  omit?: Prisma.obrasOmit<ExtArgs> | null
  /**
   * Filter, which obras to fetch.
   */
  where?: Prisma.obrasWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of obras to fetch.
   */
  orderBy?: Prisma.obrasOrderByWithRelationInput | Prisma.obrasOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for obras.
   */
  cursor?: Prisma.obrasWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` obras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` obras.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of obras.
   */
  distinct?: Prisma.ObrasScalarFieldEnum | Prisma.ObrasScalarFieldEnum[]
}

/**
 * obras findMany
 */
export type obrasFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the obras
   */
  select?: Prisma.obrasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the obras
   */
  omit?: Prisma.obrasOmit<ExtArgs> | null
  /**
   * Filter, which obras to fetch.
   */
  where?: Prisma.obrasWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of obras to fetch.
   */
  orderBy?: Prisma.obrasOrderByWithRelationInput | Prisma.obrasOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing obras.
   */
  cursor?: Prisma.obrasWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` obras from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` obras.
   */
  skip?: number
  distinct?: Prisma.ObrasScalarFieldEnum | Prisma.ObrasScalarFieldEnum[]
}

/**
 * obras create
 */
export type obrasCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the obras
   */
  select?: Prisma.obrasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the obras
   */
  omit?: Prisma.obrasOmit<ExtArgs> | null
  /**
   * The data needed to create a obras.
   */
  data: Prisma.XOR<Prisma.obrasCreateInput, Prisma.obrasUncheckedCreateInput>
}

/**
 * obras createMany
 */
export type obrasCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many obras.
   */
  data: Prisma.obrasCreateManyInput | Prisma.obrasCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * obras update
 */
export type obrasUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the obras
   */
  select?: Prisma.obrasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the obras
   */
  omit?: Prisma.obrasOmit<ExtArgs> | null
  /**
   * The data needed to update a obras.
   */
  data: Prisma.XOR<Prisma.obrasUpdateInput, Prisma.obrasUncheckedUpdateInput>
  /**
   * Choose, which obras to update.
   */
  where: Prisma.obrasWhereUniqueInput
}

/**
 * obras updateMany
 */
export type obrasUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update obras.
   */
  data: Prisma.XOR<Prisma.obrasUpdateManyMutationInput, Prisma.obrasUncheckedUpdateManyInput>
  /**
   * Filter which obras to update
   */
  where?: Prisma.obrasWhereInput
  /**
   * Limit how many obras to update.
   */
  limit?: number
}

/**
 * obras upsert
 */
export type obrasUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the obras
   */
  select?: Prisma.obrasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the obras
   */
  omit?: Prisma.obrasOmit<ExtArgs> | null
  /**
   * The filter to search for the obras to update in case it exists.
   */
  where: Prisma.obrasWhereUniqueInput
  /**
   * In case the obras found by the `where` argument doesn't exist, create a new obras with this data.
   */
  create: Prisma.XOR<Prisma.obrasCreateInput, Prisma.obrasUncheckedCreateInput>
  /**
   * In case the obras was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.obrasUpdateInput, Prisma.obrasUncheckedUpdateInput>
}

/**
 * obras delete
 */
export type obrasDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the obras
   */
  select?: Prisma.obrasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the obras
   */
  omit?: Prisma.obrasOmit<ExtArgs> | null
  /**
   * Filter which obras to delete.
   */
  where: Prisma.obrasWhereUniqueInput
}

/**
 * obras deleteMany
 */
export type obrasDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which obras to delete
   */
  where?: Prisma.obrasWhereInput
  /**
   * Limit how many obras to delete.
   */
  limit?: number
}

/**
 * obras without action
 */
export type obrasDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the obras
   */
  select?: Prisma.obrasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the obras
   */
  omit?: Prisma.obrasOmit<ExtArgs> | null
}
