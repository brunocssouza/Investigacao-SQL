
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `funcionarios` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model funcionarios
 * 
 */
export type funcionariosModel = runtime.Types.Result.DefaultSelection<Prisma.$funcionariosPayload>

export type AggregateFuncionarios = {
  _count: FuncionariosCountAggregateOutputType | null
  _avg: FuncionariosAvgAggregateOutputType | null
  _sum: FuncionariosSumAggregateOutputType | null
  _min: FuncionariosMinAggregateOutputType | null
  _max: FuncionariosMaxAggregateOutputType | null
}

export type FuncionariosAvgAggregateOutputType = {
  id: number | null
}

export type FuncionariosSumAggregateOutputType = {
  id: number | null
}

export type FuncionariosMinAggregateOutputType = {
  id: number | null
  cpf: string | null
  nome: string | null
  cargo: string | null
}

export type FuncionariosMaxAggregateOutputType = {
  id: number | null
  cpf: string | null
  nome: string | null
  cargo: string | null
}

export type FuncionariosCountAggregateOutputType = {
  id: number
  cpf: number
  nome: number
  cargo: number
  _all: number
}


export type FuncionariosAvgAggregateInputType = {
  id?: true
}

export type FuncionariosSumAggregateInputType = {
  id?: true
}

export type FuncionariosMinAggregateInputType = {
  id?: true
  cpf?: true
  nome?: true
  cargo?: true
}

export type FuncionariosMaxAggregateInputType = {
  id?: true
  cpf?: true
  nome?: true
  cargo?: true
}

export type FuncionariosCountAggregateInputType = {
  id?: true
  cpf?: true
  nome?: true
  cargo?: true
  _all?: true
}

export type FuncionariosAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which funcionarios to aggregate.
   */
  where?: Prisma.funcionariosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of funcionarios to fetch.
   */
  orderBy?: Prisma.funcionariosOrderByWithRelationInput | Prisma.funcionariosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.funcionariosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` funcionarios from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` funcionarios.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned funcionarios
  **/
  _count?: true | FuncionariosCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FuncionariosAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FuncionariosSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FuncionariosMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FuncionariosMaxAggregateInputType
}

export type GetFuncionariosAggregateType<T extends FuncionariosAggregateArgs> = {
      [P in keyof T & keyof AggregateFuncionarios]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFuncionarios[P]>
    : Prisma.GetScalarType<T[P], AggregateFuncionarios[P]>
}




export type funcionariosGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.funcionariosWhereInput
  orderBy?: Prisma.funcionariosOrderByWithAggregationInput | Prisma.funcionariosOrderByWithAggregationInput[]
  by: Prisma.FuncionariosScalarFieldEnum[] | Prisma.FuncionariosScalarFieldEnum
  having?: Prisma.funcionariosScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FuncionariosCountAggregateInputType | true
  _avg?: FuncionariosAvgAggregateInputType
  _sum?: FuncionariosSumAggregateInputType
  _min?: FuncionariosMinAggregateInputType
  _max?: FuncionariosMaxAggregateInputType
}

export type FuncionariosGroupByOutputType = {
  id: number
  cpf: string | null
  nome: string | null
  cargo: string | null
  _count: FuncionariosCountAggregateOutputType | null
  _avg: FuncionariosAvgAggregateOutputType | null
  _sum: FuncionariosSumAggregateOutputType | null
  _min: FuncionariosMinAggregateOutputType | null
  _max: FuncionariosMaxAggregateOutputType | null
}

type GetFuncionariosGroupByPayload<T extends funcionariosGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FuncionariosGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FuncionariosGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FuncionariosGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FuncionariosGroupByOutputType[P]>
      }
    >
  >



export type funcionariosWhereInput = {
  AND?: Prisma.funcionariosWhereInput | Prisma.funcionariosWhereInput[]
  OR?: Prisma.funcionariosWhereInput[]
  NOT?: Prisma.funcionariosWhereInput | Prisma.funcionariosWhereInput[]
  id?: Prisma.IntFilter<"funcionarios"> | number
  cpf?: Prisma.StringNullableFilter<"funcionarios"> | string | null
  nome?: Prisma.StringNullableFilter<"funcionarios"> | string | null
  cargo?: Prisma.StringNullableFilter<"funcionarios"> | string | null
}

export type funcionariosOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  cpf?: Prisma.SortOrderInput | Prisma.SortOrder
  nome?: Prisma.SortOrderInput | Prisma.SortOrder
  cargo?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.funcionariosOrderByRelevanceInput
}

export type funcionariosWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.funcionariosWhereInput | Prisma.funcionariosWhereInput[]
  OR?: Prisma.funcionariosWhereInput[]
  NOT?: Prisma.funcionariosWhereInput | Prisma.funcionariosWhereInput[]
  cpf?: Prisma.StringNullableFilter<"funcionarios"> | string | null
  nome?: Prisma.StringNullableFilter<"funcionarios"> | string | null
  cargo?: Prisma.StringNullableFilter<"funcionarios"> | string | null
}, "id">

export type funcionariosOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  cpf?: Prisma.SortOrderInput | Prisma.SortOrder
  nome?: Prisma.SortOrderInput | Prisma.SortOrder
  cargo?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.funcionariosCountOrderByAggregateInput
  _avg?: Prisma.funcionariosAvgOrderByAggregateInput
  _max?: Prisma.funcionariosMaxOrderByAggregateInput
  _min?: Prisma.funcionariosMinOrderByAggregateInput
  _sum?: Prisma.funcionariosSumOrderByAggregateInput
}

export type funcionariosScalarWhereWithAggregatesInput = {
  AND?: Prisma.funcionariosScalarWhereWithAggregatesInput | Prisma.funcionariosScalarWhereWithAggregatesInput[]
  OR?: Prisma.funcionariosScalarWhereWithAggregatesInput[]
  NOT?: Prisma.funcionariosScalarWhereWithAggregatesInput | Prisma.funcionariosScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"funcionarios"> | number
  cpf?: Prisma.StringNullableWithAggregatesFilter<"funcionarios"> | string | null
  nome?: Prisma.StringNullableWithAggregatesFilter<"funcionarios"> | string | null
  cargo?: Prisma.StringNullableWithAggregatesFilter<"funcionarios"> | string | null
}

export type funcionariosCreateInput = {
  id: number
  cpf?: string | null
  nome?: string | null
  cargo?: string | null
}

export type funcionariosUncheckedCreateInput = {
  id: number
  cpf?: string | null
  nome?: string | null
  cargo?: string | null
}

export type funcionariosUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  cpf?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cargo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type funcionariosUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  cpf?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cargo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type funcionariosCreateManyInput = {
  id: number
  cpf?: string | null
  nome?: string | null
  cargo?: string | null
}

export type funcionariosUpdateManyMutationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  cpf?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cargo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type funcionariosUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  cpf?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  nome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cargo?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type funcionariosOrderByRelevanceInput = {
  fields: Prisma.funcionariosOrderByRelevanceFieldEnum | Prisma.funcionariosOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type funcionariosCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cpf?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  cargo?: Prisma.SortOrder
}

export type funcionariosAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type funcionariosMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cpf?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  cargo?: Prisma.SortOrder
}

export type funcionariosMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cpf?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  cargo?: Prisma.SortOrder
}

export type funcionariosSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type funcionariosSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  cpf?: boolean
  nome?: boolean
  cargo?: boolean
}, ExtArgs["result"]["funcionarios"]>



export type funcionariosSelectScalar = {
  id?: boolean
  cpf?: boolean
  nome?: boolean
  cargo?: boolean
}

export type funcionariosOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "cpf" | "nome" | "cargo", ExtArgs["result"]["funcionarios"]>

export type $funcionariosPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "funcionarios"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    cpf: string | null
    nome: string | null
    cargo: string | null
  }, ExtArgs["result"]["funcionarios"]>
  composites: {}
}

export type funcionariosGetPayload<S extends boolean | null | undefined | funcionariosDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$funcionariosPayload, S>

export type funcionariosCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<funcionariosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FuncionariosCountAggregateInputType | true
  }

export interface funcionariosDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['funcionarios'], meta: { name: 'funcionarios' } }
  /**
   * Find zero or one Funcionarios that matches the filter.
   * @param {funcionariosFindUniqueArgs} args - Arguments to find a Funcionarios
   * @example
   * // Get one Funcionarios
   * const funcionarios = await prisma.funcionarios.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends funcionariosFindUniqueArgs>(args: Prisma.SelectSubset<T, funcionariosFindUniqueArgs<ExtArgs>>): Prisma.Prisma__funcionariosClient<runtime.Types.Result.GetResult<Prisma.$funcionariosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Funcionarios that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {funcionariosFindUniqueOrThrowArgs} args - Arguments to find a Funcionarios
   * @example
   * // Get one Funcionarios
   * const funcionarios = await prisma.funcionarios.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends funcionariosFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, funcionariosFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__funcionariosClient<runtime.Types.Result.GetResult<Prisma.$funcionariosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Funcionarios that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {funcionariosFindFirstArgs} args - Arguments to find a Funcionarios
   * @example
   * // Get one Funcionarios
   * const funcionarios = await prisma.funcionarios.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends funcionariosFindFirstArgs>(args?: Prisma.SelectSubset<T, funcionariosFindFirstArgs<ExtArgs>>): Prisma.Prisma__funcionariosClient<runtime.Types.Result.GetResult<Prisma.$funcionariosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Funcionarios that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {funcionariosFindFirstOrThrowArgs} args - Arguments to find a Funcionarios
   * @example
   * // Get one Funcionarios
   * const funcionarios = await prisma.funcionarios.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends funcionariosFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, funcionariosFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__funcionariosClient<runtime.Types.Result.GetResult<Prisma.$funcionariosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Funcionarios that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {funcionariosFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Funcionarios
   * const funcionarios = await prisma.funcionarios.findMany()
   * 
   * // Get first 10 Funcionarios
   * const funcionarios = await prisma.funcionarios.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const funcionariosWithIdOnly = await prisma.funcionarios.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends funcionariosFindManyArgs>(args?: Prisma.SelectSubset<T, funcionariosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$funcionariosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Funcionarios.
   * @param {funcionariosCreateArgs} args - Arguments to create a Funcionarios.
   * @example
   * // Create one Funcionarios
   * const Funcionarios = await prisma.funcionarios.create({
   *   data: {
   *     // ... data to create a Funcionarios
   *   }
   * })
   * 
   */
  create<T extends funcionariosCreateArgs>(args: Prisma.SelectSubset<T, funcionariosCreateArgs<ExtArgs>>): Prisma.Prisma__funcionariosClient<runtime.Types.Result.GetResult<Prisma.$funcionariosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Funcionarios.
   * @param {funcionariosCreateManyArgs} args - Arguments to create many Funcionarios.
   * @example
   * // Create many Funcionarios
   * const funcionarios = await prisma.funcionarios.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends funcionariosCreateManyArgs>(args?: Prisma.SelectSubset<T, funcionariosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Funcionarios.
   * @param {funcionariosDeleteArgs} args - Arguments to delete one Funcionarios.
   * @example
   * // Delete one Funcionarios
   * const Funcionarios = await prisma.funcionarios.delete({
   *   where: {
   *     // ... filter to delete one Funcionarios
   *   }
   * })
   * 
   */
  delete<T extends funcionariosDeleteArgs>(args: Prisma.SelectSubset<T, funcionariosDeleteArgs<ExtArgs>>): Prisma.Prisma__funcionariosClient<runtime.Types.Result.GetResult<Prisma.$funcionariosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Funcionarios.
   * @param {funcionariosUpdateArgs} args - Arguments to update one Funcionarios.
   * @example
   * // Update one Funcionarios
   * const funcionarios = await prisma.funcionarios.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends funcionariosUpdateArgs>(args: Prisma.SelectSubset<T, funcionariosUpdateArgs<ExtArgs>>): Prisma.Prisma__funcionariosClient<runtime.Types.Result.GetResult<Prisma.$funcionariosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Funcionarios.
   * @param {funcionariosDeleteManyArgs} args - Arguments to filter Funcionarios to delete.
   * @example
   * // Delete a few Funcionarios
   * const { count } = await prisma.funcionarios.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends funcionariosDeleteManyArgs>(args?: Prisma.SelectSubset<T, funcionariosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Funcionarios.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {funcionariosUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Funcionarios
   * const funcionarios = await prisma.funcionarios.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends funcionariosUpdateManyArgs>(args: Prisma.SelectSubset<T, funcionariosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Funcionarios.
   * @param {funcionariosUpsertArgs} args - Arguments to update or create a Funcionarios.
   * @example
   * // Update or create a Funcionarios
   * const funcionarios = await prisma.funcionarios.upsert({
   *   create: {
   *     // ... data to create a Funcionarios
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Funcionarios we want to update
   *   }
   * })
   */
  upsert<T extends funcionariosUpsertArgs>(args: Prisma.SelectSubset<T, funcionariosUpsertArgs<ExtArgs>>): Prisma.Prisma__funcionariosClient<runtime.Types.Result.GetResult<Prisma.$funcionariosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Funcionarios.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {funcionariosCountArgs} args - Arguments to filter Funcionarios to count.
   * @example
   * // Count the number of Funcionarios
   * const count = await prisma.funcionarios.count({
   *   where: {
   *     // ... the filter for the Funcionarios we want to count
   *   }
   * })
  **/
  count<T extends funcionariosCountArgs>(
    args?: Prisma.Subset<T, funcionariosCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FuncionariosCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Funcionarios.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FuncionariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FuncionariosAggregateArgs>(args: Prisma.Subset<T, FuncionariosAggregateArgs>): Prisma.PrismaPromise<GetFuncionariosAggregateType<T>>

  /**
   * Group by Funcionarios.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {funcionariosGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends funcionariosGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: funcionariosGroupByArgs['orderBy'] }
      : { orderBy?: funcionariosGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, funcionariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFuncionariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the funcionarios model
 */
readonly fields: funcionariosFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for funcionarios.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__funcionariosClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the funcionarios model
 */
export interface funcionariosFieldRefs {
  readonly id: Prisma.FieldRef<"funcionarios", 'Int'>
  readonly cpf: Prisma.FieldRef<"funcionarios", 'String'>
  readonly nome: Prisma.FieldRef<"funcionarios", 'String'>
  readonly cargo: Prisma.FieldRef<"funcionarios", 'String'>
}
    

// Custom InputTypes
/**
 * funcionarios findUnique
 */
export type funcionariosFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the funcionarios
   */
  select?: Prisma.funcionariosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the funcionarios
   */
  omit?: Prisma.funcionariosOmit<ExtArgs> | null
  /**
   * Filter, which funcionarios to fetch.
   */
  where: Prisma.funcionariosWhereUniqueInput
}

/**
 * funcionarios findUniqueOrThrow
 */
export type funcionariosFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the funcionarios
   */
  select?: Prisma.funcionariosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the funcionarios
   */
  omit?: Prisma.funcionariosOmit<ExtArgs> | null
  /**
   * Filter, which funcionarios to fetch.
   */
  where: Prisma.funcionariosWhereUniqueInput
}

/**
 * funcionarios findFirst
 */
export type funcionariosFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the funcionarios
   */
  select?: Prisma.funcionariosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the funcionarios
   */
  omit?: Prisma.funcionariosOmit<ExtArgs> | null
  /**
   * Filter, which funcionarios to fetch.
   */
  where?: Prisma.funcionariosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of funcionarios to fetch.
   */
  orderBy?: Prisma.funcionariosOrderByWithRelationInput | Prisma.funcionariosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for funcionarios.
   */
  cursor?: Prisma.funcionariosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` funcionarios from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` funcionarios.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of funcionarios.
   */
  distinct?: Prisma.FuncionariosScalarFieldEnum | Prisma.FuncionariosScalarFieldEnum[]
}

/**
 * funcionarios findFirstOrThrow
 */
export type funcionariosFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the funcionarios
   */
  select?: Prisma.funcionariosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the funcionarios
   */
  omit?: Prisma.funcionariosOmit<ExtArgs> | null
  /**
   * Filter, which funcionarios to fetch.
   */
  where?: Prisma.funcionariosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of funcionarios to fetch.
   */
  orderBy?: Prisma.funcionariosOrderByWithRelationInput | Prisma.funcionariosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for funcionarios.
   */
  cursor?: Prisma.funcionariosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` funcionarios from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` funcionarios.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of funcionarios.
   */
  distinct?: Prisma.FuncionariosScalarFieldEnum | Prisma.FuncionariosScalarFieldEnum[]
}

/**
 * funcionarios findMany
 */
export type funcionariosFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the funcionarios
   */
  select?: Prisma.funcionariosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the funcionarios
   */
  omit?: Prisma.funcionariosOmit<ExtArgs> | null
  /**
   * Filter, which funcionarios to fetch.
   */
  where?: Prisma.funcionariosWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of funcionarios to fetch.
   */
  orderBy?: Prisma.funcionariosOrderByWithRelationInput | Prisma.funcionariosOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing funcionarios.
   */
  cursor?: Prisma.funcionariosWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` funcionarios from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` funcionarios.
   */
  skip?: number
  distinct?: Prisma.FuncionariosScalarFieldEnum | Prisma.FuncionariosScalarFieldEnum[]
}

/**
 * funcionarios create
 */
export type funcionariosCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the funcionarios
   */
  select?: Prisma.funcionariosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the funcionarios
   */
  omit?: Prisma.funcionariosOmit<ExtArgs> | null
  /**
   * The data needed to create a funcionarios.
   */
  data: Prisma.XOR<Prisma.funcionariosCreateInput, Prisma.funcionariosUncheckedCreateInput>
}

/**
 * funcionarios createMany
 */
export type funcionariosCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many funcionarios.
   */
  data: Prisma.funcionariosCreateManyInput | Prisma.funcionariosCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * funcionarios update
 */
export type funcionariosUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the funcionarios
   */
  select?: Prisma.funcionariosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the funcionarios
   */
  omit?: Prisma.funcionariosOmit<ExtArgs> | null
  /**
   * The data needed to update a funcionarios.
   */
  data: Prisma.XOR<Prisma.funcionariosUpdateInput, Prisma.funcionariosUncheckedUpdateInput>
  /**
   * Choose, which funcionarios to update.
   */
  where: Prisma.funcionariosWhereUniqueInput
}

/**
 * funcionarios updateMany
 */
export type funcionariosUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update funcionarios.
   */
  data: Prisma.XOR<Prisma.funcionariosUpdateManyMutationInput, Prisma.funcionariosUncheckedUpdateManyInput>
  /**
   * Filter which funcionarios to update
   */
  where?: Prisma.funcionariosWhereInput
  /**
   * Limit how many funcionarios to update.
   */
  limit?: number
}

/**
 * funcionarios upsert
 */
export type funcionariosUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the funcionarios
   */
  select?: Prisma.funcionariosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the funcionarios
   */
  omit?: Prisma.funcionariosOmit<ExtArgs> | null
  /**
   * The filter to search for the funcionarios to update in case it exists.
   */
  where: Prisma.funcionariosWhereUniqueInput
  /**
   * In case the funcionarios found by the `where` argument doesn't exist, create a new funcionarios with this data.
   */
  create: Prisma.XOR<Prisma.funcionariosCreateInput, Prisma.funcionariosUncheckedCreateInput>
  /**
   * In case the funcionarios was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.funcionariosUpdateInput, Prisma.funcionariosUncheckedUpdateInput>
}

/**
 * funcionarios delete
 */
export type funcionariosDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the funcionarios
   */
  select?: Prisma.funcionariosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the funcionarios
   */
  omit?: Prisma.funcionariosOmit<ExtArgs> | null
  /**
   * Filter which funcionarios to delete.
   */
  where: Prisma.funcionariosWhereUniqueInput
}

/**
 * funcionarios deleteMany
 */
export type funcionariosDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which funcionarios to delete
   */
  where?: Prisma.funcionariosWhereInput
  /**
   * Limit how many funcionarios to delete.
   */
  limit?: number
}

/**
 * funcionarios without action
 */
export type funcionariosDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the funcionarios
   */
  select?: Prisma.funcionariosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the funcionarios
   */
  omit?: Prisma.funcionariosOmit<ExtArgs> | null
}
