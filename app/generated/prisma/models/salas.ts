
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `salas` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model salas
 * 
 */
export type salasModel = runtime.Types.Result.DefaultSelection<Prisma.$salasPayload>

export type AggregateSalas = {
  _count: SalasCountAggregateOutputType | null
  _avg: SalasAvgAggregateOutputType | null
  _sum: SalasSumAggregateOutputType | null
  _min: SalasMinAggregateOutputType | null
  _max: SalasMaxAggregateOutputType | null
}

export type SalasAvgAggregateOutputType = {
  id: number | null
}

export type SalasSumAggregateOutputType = {
  id: number | null
}

export type SalasMinAggregateOutputType = {
  id: number | null
  nome: string | null
  localizacao: string | null
}

export type SalasMaxAggregateOutputType = {
  id: number | null
  nome: string | null
  localizacao: string | null
}

export type SalasCountAggregateOutputType = {
  id: number
  nome: number
  localizacao: number
  _all: number
}


export type SalasAvgAggregateInputType = {
  id?: true
}

export type SalasSumAggregateInputType = {
  id?: true
}

export type SalasMinAggregateInputType = {
  id?: true
  nome?: true
  localizacao?: true
}

export type SalasMaxAggregateInputType = {
  id?: true
  nome?: true
  localizacao?: true
}

export type SalasCountAggregateInputType = {
  id?: true
  nome?: true
  localizacao?: true
  _all?: true
}

export type SalasAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which salas to aggregate.
   */
  where?: Prisma.salasWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of salas to fetch.
   */
  orderBy?: Prisma.salasOrderByWithRelationInput | Prisma.salasOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.salasWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` salas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` salas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned salas
  **/
  _count?: true | SalasCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SalasAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SalasSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SalasMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SalasMaxAggregateInputType
}

export type GetSalasAggregateType<T extends SalasAggregateArgs> = {
      [P in keyof T & keyof AggregateSalas]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSalas[P]>
    : Prisma.GetScalarType<T[P], AggregateSalas[P]>
}




export type salasGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.salasWhereInput
  orderBy?: Prisma.salasOrderByWithAggregationInput | Prisma.salasOrderByWithAggregationInput[]
  by: Prisma.SalasScalarFieldEnum[] | Prisma.SalasScalarFieldEnum
  having?: Prisma.salasScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SalasCountAggregateInputType | true
  _avg?: SalasAvgAggregateInputType
  _sum?: SalasSumAggregateInputType
  _min?: SalasMinAggregateInputType
  _max?: SalasMaxAggregateInputType
}

export type SalasGroupByOutputType = {
  id: number
  nome: string | null
  localizacao: string | null
  _count: SalasCountAggregateOutputType | null
  _avg: SalasAvgAggregateOutputType | null
  _sum: SalasSumAggregateOutputType | null
  _min: SalasMinAggregateOutputType | null
  _max: SalasMaxAggregateOutputType | null
}

type GetSalasGroupByPayload<T extends salasGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SalasGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SalasGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SalasGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SalasGroupByOutputType[P]>
      }
    >
  >



export type salasWhereInput = {
  AND?: Prisma.salasWhereInput | Prisma.salasWhereInput[]
  OR?: Prisma.salasWhereInput[]
  NOT?: Prisma.salasWhereInput | Prisma.salasWhereInput[]
  id?: Prisma.IntFilter<"salas"> | number
  nome?: Prisma.StringNullableFilter<"salas"> | string | null
  localizacao?: Prisma.StringNullableFilter<"salas"> | string | null
}

export type salasOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrderInput | Prisma.SortOrder
  localizacao?: Prisma.SortOrderInput | Prisma.SortOrder
  _relevance?: Prisma.salasOrderByRelevanceInput
}

export type salasWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.salasWhereInput | Prisma.salasWhereInput[]
  OR?: Prisma.salasWhereInput[]
  NOT?: Prisma.salasWhereInput | Prisma.salasWhereInput[]
  nome?: Prisma.StringNullableFilter<"salas"> | string | null
  localizacao?: Prisma.StringNullableFilter<"salas"> | string | null
}, "id">

export type salasOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrderInput | Prisma.SortOrder
  localizacao?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.salasCountOrderByAggregateInput
  _avg?: Prisma.salasAvgOrderByAggregateInput
  _max?: Prisma.salasMaxOrderByAggregateInput
  _min?: Prisma.salasMinOrderByAggregateInput
  _sum?: Prisma.salasSumOrderByAggregateInput
}

export type salasScalarWhereWithAggregatesInput = {
  AND?: Prisma.salasScalarWhereWithAggregatesInput | Prisma.salasScalarWhereWithAggregatesInput[]
  OR?: Prisma.salasScalarWhereWithAggregatesInput[]
  NOT?: Prisma.salasScalarWhereWithAggregatesInput | Prisma.salasScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"salas"> | number
  nome?: Prisma.StringNullableWithAggregatesFilter<"salas"> | string | null
  localizacao?: Prisma.StringNullableWithAggregatesFilter<"salas"> | string | null
}

export type salasCreateInput = {
  id: number
  nome?: string | null
  localizacao?: string | null
}

export type salasUncheckedCreateInput = {
  id: number
  nome?: string | null
  localizacao?: string | null
}

export type salasUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  localizacao?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type salasUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  localizacao?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type salasCreateManyInput = {
  id: number
  nome?: string | null
  localizacao?: string | null
}

export type salasUpdateManyMutationInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  localizacao?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type salasUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  localizacao?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type salasOrderByRelevanceInput = {
  fields: Prisma.salasOrderByRelevanceFieldEnum | Prisma.salasOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type salasCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  localizacao?: Prisma.SortOrder
}

export type salasAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type salasMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  localizacao?: Prisma.SortOrder
}

export type salasMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  localizacao?: Prisma.SortOrder
}

export type salasSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type salasSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nome?: boolean
  localizacao?: boolean
}, ExtArgs["result"]["salas"]>



export type salasSelectScalar = {
  id?: boolean
  nome?: boolean
  localizacao?: boolean
}

export type salasOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nome" | "localizacao", ExtArgs["result"]["salas"]>

export type $salasPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "salas"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    nome: string | null
    localizacao: string | null
  }, ExtArgs["result"]["salas"]>
  composites: {}
}

export type salasGetPayload<S extends boolean | null | undefined | salasDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$salasPayload, S>

export type salasCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<salasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SalasCountAggregateInputType | true
  }

export interface salasDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['salas'], meta: { name: 'salas' } }
  /**
   * Find zero or one Salas that matches the filter.
   * @param {salasFindUniqueArgs} args - Arguments to find a Salas
   * @example
   * // Get one Salas
   * const salas = await prisma.salas.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends salasFindUniqueArgs>(args: Prisma.SelectSubset<T, salasFindUniqueArgs<ExtArgs>>): Prisma.Prisma__salasClient<runtime.Types.Result.GetResult<Prisma.$salasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Salas that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {salasFindUniqueOrThrowArgs} args - Arguments to find a Salas
   * @example
   * // Get one Salas
   * const salas = await prisma.salas.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends salasFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, salasFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__salasClient<runtime.Types.Result.GetResult<Prisma.$salasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Salas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {salasFindFirstArgs} args - Arguments to find a Salas
   * @example
   * // Get one Salas
   * const salas = await prisma.salas.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends salasFindFirstArgs>(args?: Prisma.SelectSubset<T, salasFindFirstArgs<ExtArgs>>): Prisma.Prisma__salasClient<runtime.Types.Result.GetResult<Prisma.$salasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Salas that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {salasFindFirstOrThrowArgs} args - Arguments to find a Salas
   * @example
   * // Get one Salas
   * const salas = await prisma.salas.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends salasFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, salasFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__salasClient<runtime.Types.Result.GetResult<Prisma.$salasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Salas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {salasFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Salas
   * const salas = await prisma.salas.findMany()
   * 
   * // Get first 10 Salas
   * const salas = await prisma.salas.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const salasWithIdOnly = await prisma.salas.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends salasFindManyArgs>(args?: Prisma.SelectSubset<T, salasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$salasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Salas.
   * @param {salasCreateArgs} args - Arguments to create a Salas.
   * @example
   * // Create one Salas
   * const Salas = await prisma.salas.create({
   *   data: {
   *     // ... data to create a Salas
   *   }
   * })
   * 
   */
  create<T extends salasCreateArgs>(args: Prisma.SelectSubset<T, salasCreateArgs<ExtArgs>>): Prisma.Prisma__salasClient<runtime.Types.Result.GetResult<Prisma.$salasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Salas.
   * @param {salasCreateManyArgs} args - Arguments to create many Salas.
   * @example
   * // Create many Salas
   * const salas = await prisma.salas.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends salasCreateManyArgs>(args?: Prisma.SelectSubset<T, salasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Salas.
   * @param {salasDeleteArgs} args - Arguments to delete one Salas.
   * @example
   * // Delete one Salas
   * const Salas = await prisma.salas.delete({
   *   where: {
   *     // ... filter to delete one Salas
   *   }
   * })
   * 
   */
  delete<T extends salasDeleteArgs>(args: Prisma.SelectSubset<T, salasDeleteArgs<ExtArgs>>): Prisma.Prisma__salasClient<runtime.Types.Result.GetResult<Prisma.$salasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Salas.
   * @param {salasUpdateArgs} args - Arguments to update one Salas.
   * @example
   * // Update one Salas
   * const salas = await prisma.salas.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends salasUpdateArgs>(args: Prisma.SelectSubset<T, salasUpdateArgs<ExtArgs>>): Prisma.Prisma__salasClient<runtime.Types.Result.GetResult<Prisma.$salasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Salas.
   * @param {salasDeleteManyArgs} args - Arguments to filter Salas to delete.
   * @example
   * // Delete a few Salas
   * const { count } = await prisma.salas.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends salasDeleteManyArgs>(args?: Prisma.SelectSubset<T, salasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Salas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {salasUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Salas
   * const salas = await prisma.salas.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends salasUpdateManyArgs>(args: Prisma.SelectSubset<T, salasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Salas.
   * @param {salasUpsertArgs} args - Arguments to update or create a Salas.
   * @example
   * // Update or create a Salas
   * const salas = await prisma.salas.upsert({
   *   create: {
   *     // ... data to create a Salas
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Salas we want to update
   *   }
   * })
   */
  upsert<T extends salasUpsertArgs>(args: Prisma.SelectSubset<T, salasUpsertArgs<ExtArgs>>): Prisma.Prisma__salasClient<runtime.Types.Result.GetResult<Prisma.$salasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Salas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {salasCountArgs} args - Arguments to filter Salas to count.
   * @example
   * // Count the number of Salas
   * const count = await prisma.salas.count({
   *   where: {
   *     // ... the filter for the Salas we want to count
   *   }
   * })
  **/
  count<T extends salasCountArgs>(
    args?: Prisma.Subset<T, salasCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SalasCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Salas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SalasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SalasAggregateArgs>(args: Prisma.Subset<T, SalasAggregateArgs>): Prisma.PrismaPromise<GetSalasAggregateType<T>>

  /**
   * Group by Salas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {salasGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends salasGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: salasGroupByArgs['orderBy'] }
      : { orderBy?: salasGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, salasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the salas model
 */
readonly fields: salasFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for salas.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__salasClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the salas model
 */
export interface salasFieldRefs {
  readonly id: Prisma.FieldRef<"salas", 'Int'>
  readonly nome: Prisma.FieldRef<"salas", 'String'>
  readonly localizacao: Prisma.FieldRef<"salas", 'String'>
}
    

// Custom InputTypes
/**
 * salas findUnique
 */
export type salasFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salas
   */
  select?: Prisma.salasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the salas
   */
  omit?: Prisma.salasOmit<ExtArgs> | null
  /**
   * Filter, which salas to fetch.
   */
  where: Prisma.salasWhereUniqueInput
}

/**
 * salas findUniqueOrThrow
 */
export type salasFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salas
   */
  select?: Prisma.salasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the salas
   */
  omit?: Prisma.salasOmit<ExtArgs> | null
  /**
   * Filter, which salas to fetch.
   */
  where: Prisma.salasWhereUniqueInput
}

/**
 * salas findFirst
 */
export type salasFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salas
   */
  select?: Prisma.salasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the salas
   */
  omit?: Prisma.salasOmit<ExtArgs> | null
  /**
   * Filter, which salas to fetch.
   */
  where?: Prisma.salasWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of salas to fetch.
   */
  orderBy?: Prisma.salasOrderByWithRelationInput | Prisma.salasOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for salas.
   */
  cursor?: Prisma.salasWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` salas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` salas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of salas.
   */
  distinct?: Prisma.SalasScalarFieldEnum | Prisma.SalasScalarFieldEnum[]
}

/**
 * salas findFirstOrThrow
 */
export type salasFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salas
   */
  select?: Prisma.salasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the salas
   */
  omit?: Prisma.salasOmit<ExtArgs> | null
  /**
   * Filter, which salas to fetch.
   */
  where?: Prisma.salasWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of salas to fetch.
   */
  orderBy?: Prisma.salasOrderByWithRelationInput | Prisma.salasOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for salas.
   */
  cursor?: Prisma.salasWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` salas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` salas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of salas.
   */
  distinct?: Prisma.SalasScalarFieldEnum | Prisma.SalasScalarFieldEnum[]
}

/**
 * salas findMany
 */
export type salasFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salas
   */
  select?: Prisma.salasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the salas
   */
  omit?: Prisma.salasOmit<ExtArgs> | null
  /**
   * Filter, which salas to fetch.
   */
  where?: Prisma.salasWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of salas to fetch.
   */
  orderBy?: Prisma.salasOrderByWithRelationInput | Prisma.salasOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing salas.
   */
  cursor?: Prisma.salasWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` salas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` salas.
   */
  skip?: number
  distinct?: Prisma.SalasScalarFieldEnum | Prisma.SalasScalarFieldEnum[]
}

/**
 * salas create
 */
export type salasCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salas
   */
  select?: Prisma.salasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the salas
   */
  omit?: Prisma.salasOmit<ExtArgs> | null
  /**
   * The data needed to create a salas.
   */
  data: Prisma.XOR<Prisma.salasCreateInput, Prisma.salasUncheckedCreateInput>
}

/**
 * salas createMany
 */
export type salasCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many salas.
   */
  data: Prisma.salasCreateManyInput | Prisma.salasCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * salas update
 */
export type salasUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salas
   */
  select?: Prisma.salasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the salas
   */
  omit?: Prisma.salasOmit<ExtArgs> | null
  /**
   * The data needed to update a salas.
   */
  data: Prisma.XOR<Prisma.salasUpdateInput, Prisma.salasUncheckedUpdateInput>
  /**
   * Choose, which salas to update.
   */
  where: Prisma.salasWhereUniqueInput
}

/**
 * salas updateMany
 */
export type salasUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update salas.
   */
  data: Prisma.XOR<Prisma.salasUpdateManyMutationInput, Prisma.salasUncheckedUpdateManyInput>
  /**
   * Filter which salas to update
   */
  where?: Prisma.salasWhereInput
  /**
   * Limit how many salas to update.
   */
  limit?: number
}

/**
 * salas upsert
 */
export type salasUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salas
   */
  select?: Prisma.salasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the salas
   */
  omit?: Prisma.salasOmit<ExtArgs> | null
  /**
   * The filter to search for the salas to update in case it exists.
   */
  where: Prisma.salasWhereUniqueInput
  /**
   * In case the salas found by the `where` argument doesn't exist, create a new salas with this data.
   */
  create: Prisma.XOR<Prisma.salasCreateInput, Prisma.salasUncheckedCreateInput>
  /**
   * In case the salas was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.salasUpdateInput, Prisma.salasUncheckedUpdateInput>
}

/**
 * salas delete
 */
export type salasDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salas
   */
  select?: Prisma.salasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the salas
   */
  omit?: Prisma.salasOmit<ExtArgs> | null
  /**
   * Filter which salas to delete.
   */
  where: Prisma.salasWhereUniqueInput
}

/**
 * salas deleteMany
 */
export type salasDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which salas to delete
   */
  where?: Prisma.salasWhereInput
  /**
   * Limit how many salas to delete.
   */
  limit?: number
}

/**
 * salas without action
 */
export type salasDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the salas
   */
  select?: Prisma.salasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the salas
   */
  omit?: Prisma.salasOmit<ExtArgs> | null
}
